---
import BaseHead from "@components/base/BaseHead.astro";
import SiteFooter from "@components/base/SiteFooter.astro";
import TopNav from "@components/base/TopNav.astro";
---

<html lang="en">
  <head>
    <BaseHead
      title="MYRRYS – Design System"
      description="Developer documentation for Myrrys design system containers and surfaces"
    />
    <meta name="robots" content="noindex, nofollow" />
  </head>
  <body>
    <TopNav />
    <section class="content-grid">
      <article>
        <h1>Design System – Containers & Surfaces</h1>
        <p
          class="text-small"
          style="opacity: 0.8; margin-bottom: calc(2 * var(--grid));"
        >
          Semi-hidden developer documentation. This page is public but excluded
          from search engines.
        </p>
      </article>

      <!-- Design Tokens -->
      <article>
        <h2>Design Tokens</h2>

        <h3>The Grid Unit</h3>
        <p>
          All spacing in the design system is based on <code>--grid: 1rem</code>
        </p>

        <div class="flex" style="margin: var(--grid) 0;">
          <div
            style="width: calc(1 * var(--grid)); height: calc(1 * var(--grid)); background: var(--color-primary); border: 1px solid black;"
          >
          </div>
          <div
            style="width: calc(2 * var(--grid)); height: calc(2 * var(--grid)); background: var(--color-primary); border: 1px solid black;"
          >
          </div>
          <div
            style="width: calc(3 * var(--grid)); height: calc(3 * var(--grid)); background: var(--color-primary); border: 1px solid black;"
          >
          </div>
          <div
            style="width: calc(4 * var(--grid)); height: calc(4 * var(--grid)); background: var(--color-primary); border: 1px solid black;"
          >
          </div>
        </div>
        <p class="text-small">Visual: 1x, 2x, 3x, 4x grid units</p>

        <h3>Colors</h3>
        <div
          style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: var(--grid); margin: var(--grid) 0;"
        >
          <div>
            <div
              style="width: 100%; height: calc(3 * var(--grid)); background: var(--color-primary); border: 1px solid rgba(0,0,0,0.2); margin-bottom: calc(0.5 * var(--grid));"
            >
            </div>
            <code style="font-size: 0.875rem;">--color-primary</code><br />
            <span class="text-small" style="opacity: 0.7;">#eda01b</span>
          </div>
          <div>
            <div
              style="width: 100%; height: calc(3 * var(--grid)); background: var(--surface-primary); border: 1px solid rgba(0,0,0,0.2); margin-bottom: calc(0.5 * var(--grid));"
            >
            </div>
            <code style="font-size: 0.875rem;">--surface-primary</code><br />
            <span class="text-small" style="opacity: 0.7;"
              >color-mix formula</span
            >
          </div>
          <div>
            <div
              style="width: 100%; height: calc(3 * var(--grid)); background: var(--surface-secondary); border: 1px solid rgba(0,0,0,0.2); margin-bottom: calc(0.5 * var(--grid));"
            >
            </div>
            <code style="font-size: 0.875rem;">--surface-secondary</code><br />
            <span class="text-small" style="opacity: 0.7;">#1a373d</span>
          </div>
        </div>
      </article>

      <!-- Content Grid -->
      <article>
        <h2>Content Grid Container</h2>
        <p>
          The main layout container for page content. Creates three responsive
          columns with automatic padding and constraints.
        </p>

        <h3>Column Types</h3>
        <ul>
          <li>
            <strong>content</strong> (default) – Max 780px width, centered
          </li>
          <li>
            <strong>breakout</strong> – Wider than content, adds breathing room
          </li>
          <li>
            <strong>full-width</strong> – Edge-to-edge, spans entire viewport
          </li>
        </ul>

        <h3>Visual Example</h3>
        <p class="text-small" style="opacity: 0.8; margin-bottom: var(--grid);">
          The boxes below are actual elements using the content-grid system.
          Resize your browser to see the responsive behavior.
        </p>
      </article>
    </section>

    <!-- Live Content Grid Demo -->
    <section
      class="content-grid"
      style="background: var(--surface-secondary); color: white;"
    >
      <div
        style="background: rgba(237,160,27,0.3); padding: calc(0.5 * var(--grid)); border: 2px dashed rgba(237,160,27,0.8);"
      >
        <strong>content</strong> (default) – This is in the content column (max 780px,
        centered)
      </div>

      <div
        class="breakout"
        style="background: rgba(237,160,27,0.4); padding: calc(0.5 * var(--grid)); border: 2px dashed rgba(237,160,27,0.9);"
      >
        <strong>breakout</strong> – This is wider than content, adds breathing room
      </div>

      <div
        class="full-width"
        style="background: rgba(237,160,27,0.5); padding: calc(0.5 * var(--grid)); border: 2px dashed rgba(237,160,27,1);"
      >
        <strong>full-width</strong> – This spans edge-to-edge of the viewport
      </div>

      <div
        style="padding: calc(0.5 * var(--grid)); text-align: center; opacity: 0.8;"
      >
        ↑ Notice how each box has different widths based on its class
      </div>
    </section>

    <!-- Back to regular content grid -->
    <section class="content-grid">
      <article>
        <h3>Usage</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;article&gt;
    &lt;!-- content column (default) --&gt;
    &lt;h1&gt;Page Title&lt;/h1&gt;
    &lt;p&gt;Main content goes here...&lt;/p&gt;
  &lt;/article&gt;

  &lt;div class="breakout"&gt;
    &lt;!-- breakout column --&gt;
    &lt;img src="wide-image.jpg" alt="Wide image" /&gt;
  &lt;/div&gt;

  &lt;div class="full-width"&gt;
    &lt;!-- full-width column --&gt;
    &lt;div style="background: var(--surface-secondary);"&gt;
      Full-width section
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;</code></pre>

        <h3>Common Pattern: Article Layout</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;article&gt;
    &lt;h1&gt;Page Title&lt;/h1&gt;
    &lt;p&gt;Introduction paragraph...&lt;/p&gt;
  &lt;/article&gt;

  &lt;article&gt;
    &lt;h2&gt;Section Two&lt;/h2&gt;
    &lt;p&gt;More content...&lt;/p&gt;
  &lt;/article&gt;

  &lt;article&gt;
    &lt;h2&gt;Section Three&lt;/h2&gt;
    &lt;p&gt;Even more content...&lt;/p&gt;
  &lt;/article&gt;
&lt;/section&gt;</code></pre>

        <p class="text-small" style="opacity: 0.7; margin-top: var(--grid);">
          💡 <strong>Tip:</strong> The content-grid automatically adds spacing between
          <code>&lt;article&gt;</code> elements and applies the surface-primary background.
        </p>
      </article>

      <!-- Surface Component -->
      <article>
        <h2>Surface Component</h2>
        <p>Cards and contained content sections with consistent styling.</p>

        <h3>Properties</h3>
        <ul>
          <li>Background: <code>var(--surface-primary)</code></li>
          <li>Padding: <code>var(--grid)</code></li>
          <li>Shadow: <code>0 4px 6px rgba(0, 0, 0, 0.1)</code></li>
          <li>Backdrop filter: <code>blur(10px)</code></li>
        </ul>

        <h3>Live Example: Surface in Content Column</h3>
        <div class="surface" style="margin: var(--grid) 0;">
          <h3>Example Surface Card</h3>
          <p>
            This is a surface component with all the standard styling applied.
            Notice the subtle shadow, background color, and padding.
          </p>
        </div>
      </article>

      <div class="breakout surface" style="margin: var(--grid) 0;">
        <h3>Surface in Breakout Column</h3>
        <p>
          This surface is in the <code>breakout</code> column, making it wider than
          the standard content. Great for featured content or wide cards.
        </p>
      </div>

      <article>
        <h3>Usage</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;div class="surface"&gt;
  &lt;h3&gt;Card Title&lt;/h3&gt;
  &lt;p&gt;Card content goes here...&lt;/p&gt;
&lt;/div&gt;</code></pre>

        <h3>Surface within Content Grid</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;div class="surface"&gt;
    &lt;!-- Contained card in content column --&gt;
    &lt;h3&gt;Feature Card&lt;/h3&gt;
    &lt;p&gt;Description of the feature...&lt;/p&gt;
  &lt;/div&gt;
&lt;/section&gt;</code></pre>
      </article>

      <!-- Common Patterns -->
      <article>
        <h2>Common Patterns</h2>

        <h3>Full-Width Hero + Content</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;div class="full-width" style="background: var(--surface-secondary); padding: calc(3 * var(--grid)); color: white;"&gt;
    &lt;h1 style="text-align: center;"&gt;Hero Section&lt;/h1&gt;
    &lt;p style="text-align: center;"&gt;Impactful tagline&lt;/p&gt;
  &lt;/div&gt;

  &lt;article&gt;
    &lt;h2&gt;Main Content&lt;/h2&gt;
    &lt;p&gt;Content follows the hero...&lt;/p&gt;
  &lt;/article&gt;
&lt;/section&gt;</code></pre>

        <h3>Card Grid (with two-col utility)</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;article&gt;
    &lt;h2&gt;Our Features&lt;/h2&gt;
  &lt;/article&gt;

  &lt;div class="two-col"&gt;
    &lt;div class="surface"&gt;
      &lt;h3&gt;Feature One&lt;/h3&gt;
      &lt;p&gt;Description...&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="surface"&gt;
      &lt;h3&gt;Feature Two&lt;/h3&gt;
      &lt;p&gt;Description...&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;</code></pre>

        <h3>Breakout Image with Caption</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;article&gt;
    &lt;p&gt;Regular content width...&lt;/p&gt;
  &lt;/article&gt;

  &lt;figure class="breakout"&gt;
    &lt;img src="wide-image.jpg" alt="Description" /&gt;
    &lt;figcaption class="text-small text-center"&gt;
      Image caption
    &lt;/figcaption&gt;
  &lt;/figure&gt;

  &lt;article&gt;
    &lt;p&gt;More regular content...&lt;/p&gt;
  &lt;/article&gt;
&lt;/section&gt;</code></pre>
      </article>

      <!-- Best Practices -->
      <article>
        <h2>Best Practices</h2>

        <h3>✅ Good Practices</h3>
        <ul>
          <li>Use <code>content-grid</code> as your main page wrapper</li>
          <li>
            Use <code>--grid</code> for all spacing (padding, margin, gap)
          </li>
          <li>Use <code>surface</code> for cards and contained sections</li>
          <li>
            Let child elements default to content column (no extra classes
            needed)
          </li>
          <li>
            Use <code>breakout</code> for images and media that need more space
          </li>
          <li>
            Use <code>full-width</code> sparingly for hero sections and backgrounds
          </li>
          <li>
            Use <code>@container</code> queries instead of <code>@media</code> queries
            for component responsiveness
          </li>
          <li>
            Leverage the container names: <code>content</code>, <code
              >breakout</code
            >,
            <code>full-width</code>
          </li>
        </ul>

        <h3>❌ Avoid</h3>
        <ul>
          <li>Hard-coded pixel values for spacing</li>
          <li>Nested <code>content-grid</code> containers</li>
          <li>Custom max-width on content (use the system)</li>
          <li>Overriding surface styling (create a variant instead)</li>
          <li>Fighting the grid system with absolute positioning</li>
          <li>
            Adding <code>container-type</code> to utility classes like <code
              >.two-col</code
            > or <code>.flex</code>
          </li>
          <li>
            Using viewport-based media queries when container queries would work
            better
          </li>
        </ul>

        <h3>💡 Tips</h3>
        <ul>
          <li>
            The grid system is responsive automatically – no media queries
            needed for columns
          </li>
          <li>
            Use <code>calc()</code> for custom spacing: <code
              >calc(2 * var(--grid))</code
            >
          </li>
          <li>Surfaces work great inside any column type</li>
          <li>
            You can nest utility classes (like <code>two-col</code>) inside
            content-grid
          </li>
          <li>
            Container queries make components truly reusable across different
            column widths
          </li>
          <li>
            Only the three main columns (content, breakout, full-width) are
            containers – keep it simple!
          </li>
        </ul>
      </article>

      <!-- Quick Reference -->
      <article>
        <h2>Quick Reference</h2>

        <h3>CSS Variables</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>/* Spacing */
--grid: 1rem

/* Colors */
--color-primary: #eda01b
--surface-primary: color-mix(in hsl, white, var(--color-primary) 5.5%)
--surface-secondary: #1a373d
--surface-footer: hsla(142deg, 37%, 80%, 0.22)

/* Content Grid (advanced) */
--padding-inline: var(--grid)
--content-max-width: 780px
--breakout-width: calc(8 * var(--grid))

/* Container names (for @container queries) */
container-name: content | breakout | full-width</code></pre>

        <h3>Class Reference</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>/* Layout */
.content-grid        Main layout container
.breakout           Wider than content column (CSS container)
.full-width         Edge-to-edge column (CSS container)

/* Note: Default children are in content column (also a CSS container) */

/* Components */
.surface            Card/section with background and shadow

/* Utilities (future docs) */
.two-col            Two-column responsive grid
.golden-col         Golden ratio columns (1.618:1)
.flex               Flexbox row with gap
.flex-col           Flexbox column</code></pre>
      </article>

      <!-- CSS Container Queries -->
      <article>
        <h2>CSS Container Queries</h2>
        <p>
          The content-grid system uses CSS container queries to enable
          components to respond to their container width, not just viewport
          width.
        </p>

        <h3>Container Architecture</h3>
        <p>
          <strong>Only these elements are CSS containers:</strong>
        </p>
        <ul>
          <li>
            <strong>content</strong> column – <code
              >container-name: content</code
            >
          </li>
          <li>
            <strong>breakout</strong> column – <code
              >container-name: breakout</code
            >
          </li>
          <li>
            <strong>full-width</strong> column – <code
              >container-name: full-width</code
            >
          </li>
        </ul>

        <p>
          <strong>Important:</strong> Other utility classes like <code
            >.two-col</code
          >, <code>.golden-col</code>, <code>.flex</code>, etc. are <strong
            >NOT</strong
          > containers. This prevents nested container issues and keeps the architecture
          clean.
        </p>

        <h3>Using Container Queries</h3>
        <p>
          Components inside content-grid columns can use <code>@container</code>
          queries to adapt to their container:
        </p>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{"/* Component responds to content column width */"}
{"@container content (min-width: 500px) {"}
{"  .my-component {"}
{"    display: grid;"}
{"    grid-template-columns: 1fr 1fr;"}
{"  }"}
{"}"}

{"/* Or use any container name */"}
{"@container (min-width: 600px) {"}
{"  .card {"}
{"    flex-direction: row;"}
{"  }"}
{"}"}</code></pre>

        <h3>Benefits</h3>
        <ul>
          <li>
            <strong>Component independence:</strong> Components adapt to their container,
            not viewport
          </li>
          <li>
            <strong>Reusability:</strong> Same component works in content, breakout,
            or full-width
          </li>
          <li>
            <strong>Cleaner code:</strong> No media queries based on guessing where
            component will be used
          </li>
          <li>
            <strong>Predictable:</strong> Clear container boundaries prevent nesting
            issues
          </li>
        </ul>

        <h3>Example: Responsive Card</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{"<section class=\"content-grid\">"}
{"  <div class=\"product-card\">"}
{"    <!-- Card in content column (max 780px) -->"}
{"  </div>"}

{"  <div class=\"breakout product-card\">"}
{"    <!-- Same card in breakout column (wider) -->"}
{"    <!-- Container query adapts it automatically -->"}
{"  </div>"}
{"</section>"}

{"<style>"}
{"  .product-card {"}
{"    display: flex;"}
{"    flex-direction: column;"}
{"  }"}

{"  @container (min-width: 500px) {"}
{"    .product-card {"}
{"      flex-direction: row;"}
{"    }"}
{"  }"}
{"</style>"}</code></pre>
      </article>

      <!-- File Locations -->
      <article style="background: var(--surface-secondary); color: white;">
        <h2>File Locations</h2>
        <p class="text-small">
          For reference when working with the design system:
        </p>
        <ul class="text-small">
          <li>
            <code>/src/styles/tokens.css</code> – Design tokens (colors, spacing)
          </li>
          <li>
            <code>/src/styles/content-grid.css</code> – Content grid system (with
            container queries)
          </li>
          <li><code>/src/styles/surface.css</code> – Surface component</li>
          <li><code>/src/styles/two-col.css</code> – Two-column layout</li>
          <li>
            <code>/src/styles/golden-col.css</code> – Golden ratio layout
          </li>
          <li><code>/src/styles/flex.css</code> – Flex utilities</li>
        </ul>
        <p class="text-small" style="margin-top: var(--grid); opacity: 0.8;">
          💡 All styles are imported via <code>/src/styles/styles.css</code>
        </p>
      </article>

      <!-- Existing Button Examples -->
      <article>
        <h2>Buttons</h2>
        <p>Button styling examples (full documentation coming in Phase 2)</p>
        <div class="flex flex-col justify-center">
          <button>A button</button>
          <a href="#buttons" class="button">A link Button</a>
          <button class="textButton">Text Button</button>
          <a href="#buttons" class="button textButton">Link Text Button</a>
        </div>
      </article>
    </section>
    <SiteFooter />
  </body>
</html>
