---
import BaseHead from "@components/base/BaseHead.astro";
import SiteFooter from "@components/base/SiteFooter.astro";
import TopNav from "@components/base/TopNav.astro";
---

<html lang="en">
  <head>
    <BaseHead
      title="MYRRYS – Design System"
      description="Developer documentation for Myrrys design system containers and surfaces"
    />
    <meta name="robots" content="noindex, nofollow" />
  </head>
  <body>
    <TopNav />
    <section class="content-grid">
      <article>
        <h1>Design System – Containers & Surfaces</h1>
        <p
          class="text-small"
          style="opacity: 0.8; margin-bottom: calc(2 * var(--grid));"
        >
          Semi-hidden developer documentation. This page is public but excluded
          from search engines.
        </p>
      </article>

      <!-- Design Tokens -->
      <article>
        <h2>Design Tokens</h2>

        <h3>The Grid Unit</h3>
        <p>
          All spacing in the design system is based on <code>--grid: 1rem</code>
        </p>

        <div class="flex" style="margin: var(--grid) 0;">
          <div
            style="width: calc(1 * var(--grid)); height: calc(1 * var(--grid)); background: var(--color-primary); border: 1px solid black;"
          >
          </div>
          <div
            style="width: calc(2 * var(--grid)); height: calc(2 * var(--grid)); background: var(--color-primary); border: 1px solid black;"
          >
          </div>
          <div
            style="width: calc(3 * var(--grid)); height: calc(3 * var(--grid)); background: var(--color-primary); border: 1px solid black;"
          >
          </div>
          <div
            style="width: calc(4 * var(--grid)); height: calc(4 * var(--grid)); background: var(--color-primary); border: 1px solid black;"
          >
          </div>
        </div>
        <p class="text-small">Visual: 1x, 2x, 3x, 4x grid units</p>

        <h3>Colors</h3>
        <div
          style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: var(--grid); margin: var(--grid) 0;"
        >
          <div>
            <div
              style="width: 100%; height: calc(3 * var(--grid)); background: var(--color-primary); border: 1px solid rgba(0,0,0,0.2); margin-bottom: calc(0.5 * var(--grid));"
            >
            </div>
            <code style="font-size: 0.875rem;">--color-primary</code><br />
            <span class="text-small" style="opacity: 0.7;">#eda01b</span>
          </div>
          <div>
            <div
              style="width: 100%; height: calc(3 * var(--grid)); background: var(--surface-primary); border: 1px solid rgba(0,0,0,0.2); margin-bottom: calc(0.5 * var(--grid));"
            >
            </div>
            <code style="font-size: 0.875rem;">--surface-primary</code><br />
            <span class="text-small" style="opacity: 0.7;"
              >color-mix formula</span
            >
          </div>
          <div>
            <div
              style="width: 100%; height: calc(3 * var(--grid)); background: var(--surface-secondary); border: 1px solid rgba(0,0,0,0.2); margin-bottom: calc(0.5 * var(--grid));"
            >
            </div>
            <code style="font-size: 0.875rem;">--surface-secondary</code><br />
            <span class="text-small" style="opacity: 0.7;">#1a373d</span>
          </div>
        </div>

        <h3>Breakpoints</h3>
        <p>
          Standard viewport breakpoints for testing and media queries. These
          values align with common device sizes and are used throughout the
          system.
        </p>

        <div
          style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: var(--grid); margin: var(--grid) 0;"
        >
          <div class="surface" style="padding: calc(0.75 * var(--grid));">
            <strong
              style="display: block; margin-bottom: calc(0.5 * var(--grid)); color: var(--color-primary);"
            >
              Mobile
            </strong>
            <code style="font-size: 0.875rem;">&lt; 640px</code><br />
            <span
              class="text-small"
              style="opacity: 0.7; display: block; margin-top: calc(0.25 * var(--grid));"
            >
              Default / base styles<br />
              iPhone, Android phones
            </span>
          </div>

          <div class="surface" style="padding: calc(0.75 * var(--grid));">
            <strong
              style="display: block; margin-bottom: calc(0.5 * var(--grid)); color: var(--color-primary);"
            >
              Tablet
            </strong>
            <code style="font-size: 0.875rem;">640px – 1024px</code><br />
            <span
              class="text-small"
              style="opacity: 0.7; display: block; margin-top: calc(0.25 * var(--grid));"
            >
              @media (min-width: 640px)<br />
              iPad, tablets, small laptops
            </span>
          </div>

          <div class="surface" style="padding: calc(0.75 * var(--grid));">
            <strong
              style="display: block; margin-bottom: calc(0.5 * var(--grid)); color: var(--color-primary);"
            >
              Desktop
            </strong>
            <code style="font-size: 0.875rem;">&gt; 1024px</code><br />
            <span
              class="text-small"
              style="opacity: 0.7; display: block; margin-top: calc(0.25 * var(--grid));"
            >
              @media (min-width: 1024px)<br />
              Desktop, large screens
            </span>
          </div>
        </div>

        <h4>Usage in CSS</h4>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px; margin: var(--grid) 0;"
          set:html={`<code>/* Mobile first (default) */
.component {
  font-size: 1rem;
  padding: var(--grid);
}

/* Tablet and up */
@media (min-width: 640px) {
  .component {
    font-size: 1.125rem;
    padding: calc(1.5 * var(--grid));
  }
}

/* Desktop and up */
@media (min-width: 1024px) {
  .component {
    font-size: 1.25rem;
    padding: calc(2 * var(--grid));
  }
}</code>`}
        />

        <p class="text-small" style="opacity: 0.7; margin-top: var(--grid);">
          💡 <strong>Testing tip:</strong> Always test layouts at these specific
          widths: <strong>375px</strong> (mobile), <strong>768px</strong> (tablet),
          and <strong>1440px</strong> (desktop). Use browser dev tools to set custom
          viewport sizes.
        </p>
      </article>

      <!-- Content Grid -->
      <article>
        <h2>Content Grid Container</h2>
        <p>
          The main layout container for page content. Creates three responsive
          columns with automatic padding and constraints.
        </p>

        <h3>Column Types</h3>
        <ul>
          <li>
            <strong>content</strong> (default) – Max 780px width, centered
          </li>
          <li>
            <strong>breakout</strong> – Wider than content, adds breathing room
          </li>
          <li>
            <strong>full-width</strong> – Edge-to-edge, spans entire viewport
          </li>
        </ul>

        <h3>Visual Example</h3>
        <p class="text-small" style="opacity: 0.8; margin-bottom: var(--grid);">
          The boxes below are actual elements using the content-grid system.
          Resize your browser to see the responsive behavior.
        </p>
      </article>
    </section>

    <!-- Live Content Grid Demo -->
    <section
      class="content-grid"
      style="background: var(--surface-secondary); color: white;"
    >
      <div
        style="background: rgba(237,160,27,0.3); padding: calc(0.5 * var(--grid)); border: 2px dashed rgba(237,160,27,0.8);"
      >
        <strong>content</strong> (default) – This is in the content column (max 780px,
        centered)
      </div>

      <div
        class="breakout"
        style="background: rgba(237,160,27,0.4); padding: calc(0.5 * var(--grid)); border: 2px dashed rgba(237,160,27,0.9);"
      >
        <strong>breakout</strong> – This is wider than content, adds breathing room
      </div>

      <div
        class="full-width"
        style="background: rgba(237,160,27,0.5); padding: calc(0.5 * var(--grid)); border: 2px dashed rgba(237,160,27,1);"
      >
        <strong>full-width</strong> – This spans edge-to-edge of the viewport
      </div>

      <div
        style="padding: calc(0.5 * var(--grid)); text-align: center; opacity: 0.8;"
      >
        ↑ Notice how each box has different widths based on its class
      </div>
    </section>

    <!-- Back to regular content grid -->
    <section class="content-grid">
      <article>
        <h3>Usage</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;article&gt;
    &lt;!-- content column (default) --&gt;
    &lt;h1&gt;Page Title&lt;/h1&gt;
    &lt;p&gt;Main content goes here...&lt;/p&gt;
  &lt;/article&gt;

  &lt;div class="breakout"&gt;
    &lt;!-- breakout column --&gt;
    &lt;img src="wide-image.jpg" alt="Wide image" /&gt;
  &lt;/div&gt;

  &lt;div class="full-width"&gt;
    &lt;!-- full-width column --&gt;
    &lt;div style="background: var(--surface-secondary);"&gt;
      Full-width section
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;</code></pre>

        <h3>Common Pattern: Article Layout</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;article&gt;
    &lt;h1&gt;Page Title&lt;/h1&gt;
    &lt;p&gt;Introduction paragraph...&lt;/p&gt;
  &lt;/article&gt;

  &lt;article&gt;
    &lt;h2&gt;Section Two&lt;/h2&gt;
    &lt;p&gt;More content...&lt;/p&gt;
  &lt;/article&gt;

  &lt;article&gt;
    &lt;h2&gt;Section Three&lt;/h2&gt;
    &lt;p&gt;Even more content...&lt;/p&gt;
  &lt;/article&gt;
&lt;/section&gt;</code></pre>

        <p class="text-small" style="opacity: 0.7; margin-top: var(--grid);">
          💡 <strong>Tip:</strong> The content-grid automatically adds spacing between
          <code>&lt;article&gt;</code> elements and applies the surface-primary background.
        </p>
      </article>

      <!-- Surface Component -->
      <article>
        <h2>Surface Component</h2>
        <p>Cards and contained content sections with consistent styling.</p>

        <h3>Properties</h3>
        <ul>
          <li>Background: <code>var(--surface-primary)</code></li>
          <li>Padding: <code>var(--grid)</code></li>
          <li>Shadow: <code>0 4px 6px rgba(0, 0, 0, 0.1)</code></li>
          <li>Backdrop filter: <code>blur(10px)</code></li>
        </ul>

        <h3>Live Example: Surface in Content Column</h3>
        <div class="surface" style="margin: var(--grid) 0;">
          <h3>Example Surface Card</h3>
          <p>
            This is a surface component with all the standard styling applied.
            Notice the subtle shadow, background color, and padding.
          </p>
        </div>
      </article>

      <div class="breakout surface" style="margin: var(--grid) 0;">
        <h3>Surface in Breakout Column</h3>
        <p>
          This surface is in the <code>breakout</code> column, making it wider than
          the standard content. Great for featured content or wide cards.
        </p>
      </div>

      <article>
        <h3>Usage</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;div class="surface"&gt;
  &lt;h3&gt;Card Title&lt;/h3&gt;
  &lt;p&gt;Card content goes here...&lt;/p&gt;
&lt;/div&gt;</code></pre>

        <h3>Surface within Content Grid</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;div class="surface"&gt;
    &lt;!-- Contained card in content column --&gt;
    &lt;h3&gt;Feature Card&lt;/h3&gt;
    &lt;p&gt;Description of the feature...&lt;/p&gt;
  &lt;/div&gt;
&lt;/section&gt;</code></pre>
      </article>

      <!-- Common Patterns -->
      <article>
        <h2>Common Patterns</h2>

        <h3>Full-Width Hero + Content</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;div class="full-width" style="background: var(--surface-secondary); padding: calc(3 * var(--grid)); color: white;"&gt;
    &lt;h1 style="text-align: center;"&gt;Hero Section&lt;/h1&gt;
    &lt;p style="text-align: center;"&gt;Impactful tagline&lt;/p&gt;
  &lt;/div&gt;

  &lt;article&gt;
    &lt;h2&gt;Main Content&lt;/h2&gt;
    &lt;p&gt;Content follows the hero...&lt;/p&gt;
  &lt;/article&gt;
&lt;/section&gt;</code></pre>

        <h3>Card Grid (with two-col utility)</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;article&gt;
    &lt;h2&gt;Our Features&lt;/h2&gt;
  &lt;/article&gt;

  &lt;div class="two-col"&gt;
    &lt;div class="surface"&gt;
      &lt;h3&gt;Feature One&lt;/h3&gt;
      &lt;p&gt;Description...&lt;/p&gt;
    &lt;/div&gt;
    &lt;div class="surface"&gt;
      &lt;h3&gt;Feature Two&lt;/h3&gt;
      &lt;p&gt;Description...&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;</code></pre>

        <h3>Breakout Image with Caption</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>&lt;section class="content-grid"&gt;
  &lt;article&gt;
    &lt;p&gt;Regular content width...&lt;/p&gt;
  &lt;/article&gt;

  &lt;figure class="breakout"&gt;
    &lt;img src="wide-image.jpg" alt="Description" /&gt;
    &lt;figcaption class="text-small text-center"&gt;
      Image caption
    &lt;/figcaption&gt;
  &lt;/figure&gt;

  &lt;article&gt;
    &lt;p&gt;More regular content...&lt;/p&gt;
  &lt;/article&gt;
&lt;/section&gt;</code></pre>
      </article>

      <!-- Best Practices -->
      <article>
        <h2>Best Practices</h2>

        <h3>✅ Good Practices</h3>
        <ul>
          <li>Use <code>content-grid</code> as your main page wrapper</li>
          <li>
            Use <code>--grid</code> for all spacing (padding, margin, gap)
          </li>
          <li>Use <code>surface</code> for cards and contained sections</li>
          <li>
            Let child elements default to content column (no extra classes
            needed)
          </li>
          <li>
            Use <code>breakout</code> for images and media that need more space
          </li>
          <li>
            Use <code>full-width</code> sparingly for hero sections and backgrounds
          </li>
          <li>
            Use <code>@container</code> queries instead of <code>@media</code> queries
            for component responsiveness
          </li>
          <li>
            Leverage the container names: <code>content</code>, <code
              >breakout</code
            >,
            <code>full-width</code>
          </li>
        </ul>

        <h3>❌ Avoid</h3>
        <ul>
          <li>Hard-coded pixel values for spacing</li>
          <li>Nested <code>content-grid</code> containers</li>
          <li>Custom max-width on content (use the system)</li>
          <li>Overriding surface styling (create a variant instead)</li>
          <li>Fighting the grid system with absolute positioning</li>
          <li>
            Adding <code>container-type</code> to utility classes like <code
              >.two-col</code
            > or <code>.flex</code>
          </li>
          <li>
            Using viewport-based media queries when container queries would work
            better
          </li>
        </ul>

        <h3>💡 Tips</h3>
        <ul>
          <li>
            The grid system is responsive automatically – no media queries
            needed for columns
          </li>
          <li>
            Use <code>calc()</code> for custom spacing: <code
              >calc(2 * var(--grid))</code
            >
          </li>
          <li>Surfaces work great inside any column type</li>
          <li>
            You can nest utility classes (like <code>two-col</code>) inside
            content-grid
          </li>
          <li>
            Container queries make components truly reusable across different
            column widths
          </li>
          <li>
            Only the three main columns (content, breakout, full-width) are
            containers – keep it simple!
          </li>
        </ul>
      </article>

      <!-- Quick Reference -->
      <article>
        <h2>Quick Reference</h2>

        <h3>CSS Variables</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>/* Spacing */
--grid: 1rem

/* Colors */
--color-primary: #eda01b
--surface-primary: color-mix(in hsl, white, var(--color-primary) 5.5%)
--surface-secondary: #1a373d
--surface-footer: hsla(142deg, 37%, 80%, 0.22)

/* Content Grid (advanced) */
--padding-inline: var(--grid)
--content-max-width: 780px
--breakout-width: calc(8 * var(--grid))

/* Container names (for @container queries) */
container-name: content | breakout | full-width</code></pre>

        <h3>Class Reference</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>/* Layout */
.content-grid        Main layout container
.breakout           Wider than content column (CSS container)
.full-width         Edge-to-edge column (CSS container)

/* Note: Default children are in content column (also a CSS container) */

/* Components */
.surface            Card/section with background and shadow

/* Themes */
.theme-letl         Legendoja & Lohikäärmeitä theme
.theme-legenda      Legenda magazine theme
.theme-quick        The Quick dark theme

/* Utilities (future docs) */
.two-col            Two-column responsive grid
.golden-col         Golden ratio columns (1.618:1)
.flex               Flexbox row with gap
.flex-col           Flexbox column</code></pre>
      </article>

      <!-- CSS Container Queries -->
      <article>
        <h2>CSS Container Queries</h2>
        <p>
          The content-grid system uses CSS container queries to enable
          components to respond to their container width, not just viewport
          width.
        </p>

        <h3>Container Architecture</h3>
        <p>
          <strong>Only these elements are CSS containers:</strong>
        </p>
        <ul>
          <li>
            <strong>content</strong> column – <code
              >container-name: content</code
            >
          </li>
          <li>
            <strong>breakout</strong> column – <code
              >container-name: breakout</code
            >
          </li>
          <li>
            <strong>full-width</strong> column – <code
              >container-name: full-width</code
            >
          </li>
        </ul>

        <p>
          <strong>Important:</strong> Other utility classes like <code
            >.two-col</code
          >, <code>.golden-col</code>, <code>.flex</code>, etc. are <strong
            >NOT</strong
          > containers. This prevents nested container issues and keeps the architecture
          clean.
        </p>

        <h3>Using Container Queries</h3>
        <p>
          Components inside content-grid columns can use <code>@container</code>
          queries to adapt to their container:
        </p>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{"/* Component responds to content column width */"}
{"@container content (min-width: 500px) {"}
{"  .my-component {"}
{"    display: grid;"}
{"    grid-template-columns: 1fr 1fr;"}
{"  }"}
{"}"}

{"/* Or use any container name */"}
{"@container (min-width: 600px) {"}
{"  .card {"}
{"    flex-direction: row;"}
{"  }"}
{"}"}</code></pre>

        <h3>Benefits</h3>
        <ul>
          <li>
            <strong>Component independence:</strong> Components adapt to their container,
            not viewport
          </li>
          <li>
            <strong>Reusability:</strong> Same component works in content, breakout,
            or full-width
          </li>
          <li>
            <strong>Cleaner code:</strong> No media queries based on guessing where
            component will be used
          </li>
          <li>
            <strong>Predictable:</strong> Clear container boundaries prevent nesting
            issues
          </li>
        </ul>

        <h3>Example: Responsive Card</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{"<section class=\"content-grid\">"}
{"  <div class=\"product-card\">"}
{"    <!-- Card in content column (max 780px) -->"}
{"  </div>"}

{"  <div class=\"breakout product-card\">"}
{"    <!-- Same card in breakout column (wider) -->"}
{"    <!-- Container query adapts it automatically -->"}
{"  </div>"}
{"</section>"}

{"<style>"}
{"  .product-card {"}
{"    display: flex;"}
{"    flex-direction: column;"}
{"  }"}

{"  @container (min-width: 500px) {"}
{"    .product-card {"}
{"      flex-direction: row;"}
{"    }"}
{"  }"}
{"</style>"}</code></pre>
      </article>

      <!-- Theming -->
      <article>
        <h2>Theming</h2>
        <p>
          The design system supports product-specific theming by applying theme
          classes to <code>content-grid</code> containers. This allows different
          sections of the site to have distinct visual identities while maintaining
          structural consistency.
        </p>

        <h3>Available Themes</h3>
        <ul>
          <li>
            <code>.theme-letl</code> – Legendoja & Lohikäärmeitä (warm gradient)
          </li>
          <li>
            <code>.theme-legenda</code> – Legenda magazine (background image with
            overlay)
          </li>
          <li>
            <code>.theme-quick</code> – The Quick (dark theme with background image)
          </li>
        </ul>

        <h3>Live Theme Examples</h3>
        <p class="text-small" style="opacity: 0.8; margin-bottom: var(--grid);">
          Below are live demonstrations of each theme applied to content-grid
          containers.
        </p>
      </article>
    </section>

    <!-- LETL Theme Demo -->
    <section
      class="theme-letl content-grid"
      style="min-height: calc(10 * var(--grid));"
    >
      <article class="surface">
        <h3>Theme: Legendoja & Lohikäärmeitä</h3>
        <p>
          <code>.theme-letl</code> – Warm gradient background with custom blockquote
          styling.
        </p>
        <blockquote>
          This is a blockquote styled with the L&L theme. Notice the left border
          and background color.
        </blockquote>
      </article>
    </section>

    <!-- Legenda Theme Demo -->
    <section
      class="theme-legenda content-grid"
      style="min-height: calc(10 * var(--grid));"
    >
      <article class="surface">
        <h3>Theme: Legenda</h3>
        <p>
          <code>.theme-legenda</code> – Background image with gradient overlay for
          magazine aesthetic.
        </p>
      </article>
    </section>

    <!-- Quick Theme Demo -->
    <section
      class="theme-quick content-grid"
      style="min-height: calc(10 * var(--grid));"
    >
      <article class="surface">
        <h3>Theme: The Quick</h3>
        <p>
          <code>.theme-quick</code> – Dark theme with photo background. Notice the
          custom <a href="#theming">link styling</a>.
        </p>
      </article>
    </section>

    <!-- Back to regular content -->
    <section class="content-grid">
      <article>
        <h3>How Theming Works</h3>
        <p>
          Themes are applied by adding a theme class to the <code
            >content-grid</code
          > container. Theme CSS overrides design tokens (like <code
            >--surface-primary</code
          >, <code>--color-key</code>) and can add backgrounds, overlays, and
          custom styling.
        </p>

        <h3>Basic Usage</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{"<section class=\"theme-letl content-grid\">"}
{"  <article class=\"surface\">"}
{"    <h1>Product Title</h1>"}
{"    <p>Content with L&L theme styling...</p>"}
{"  </article>"}
{"</section>"}</code></pre>

        <h3>Theme Architecture</h3>
        <p>
          <strong>Theme files location:</strong>
          <code>/src/styles/themes/</code>
        </p>
        <ul>
          <li>
            <code>letl.css</code> – Gradient backgrounds, blockquote styling
          </li>
          <li>
            <code>legenda.css</code> – Background image with gradient overlay
          </li>
          <li>
            <code>quick.css</code> – Dark theme with photo background and custom
            link styles
          </li>
        </ul>

        <h3>Common Pattern: Wrapper Components</h3>
        <p>
          Create reusable wrapper components for each theme to ensure
          consistency:
        </p>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{"<!-- LetlContent.astro -->"}
{"<div class=\"theme-letl content-grid\">"}
{"  <slot />"}
{"</div>"}

{"<!-- Usage -->"}
{"<LetlContent>"}
{"  <section>"}
{"    <article class=\"surface\">"}
{"      <h1>Content</h1>"}
{"    </article>"}
{"  </section>"}
{"</LetlContent>"}</code></pre>

        <h3>Theme Capabilities</h3>
        <p>Themes can override or extend:</p>
        <ul>
          <li>
            <strong>Design tokens:</strong>
            <code>--color-primary</code>, <code>--surface-primary</code>, <code
              >--color-key</code
            >
          </li>
          <li>
            <strong>Backgrounds:</strong> Gradients, images, overlays using <code
              >::before</code
            > pseudo-elements
          </li>
          <li>
            <strong>Element styling:</strong> Links, blockquotes, headings within
            theme
          </li>
          <li>
            <strong>Z-index management:</strong> Overlays at z-index 0, content at
            z-index 10
          </li>
        </ul>

        <h3>Example: LETL Theme Structure</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{".theme-letl {"}
{"  --background-container: linear-gradient("}
{"    140deg,"}
{"    hsl(38deg 63% 80%),"}
{"    hsl(246deg 29% 87%)"}
{"  );"}
{"  --surface-primary: linear-gradient("}
{"    140deg,"}
{"    color-mix(in hsl, white, var(--color-primary) 10%),"}
{"    color-mix(in hsl, white, var(--surface-secondary) 10%)"}
{"  );"}
{"}"}

{".theme-letl blockquote {"}
{"  border-left: solid calc(0.5 * var(--grid)) var(--color-primary);"}
{"  background: color-mix(in hsl, transparent, var(--color-primary) 22%);"}
{"}"}</code></pre>

        <h3>Creating a New Theme</h3>
        <p>To create a new product theme:</p>
        <ol>
          <li>
            Create <code>/src/styles/themes/your-theme.css</code>
          </li>
          <li>
            Import it in <code>/src/styles/styles.css</code>
          </li>
          <li>Define <code>.theme-your-theme</code> class</li>
          <li>Override design tokens and add custom styling</li>
          <li>
            Create a wrapper component like <code>YourThemeContent.astro</code>
          </li>
          <li>
            Apply to <code>content-grid</code> containers
          </li>
        </ol>

        <h3>Best Practices for Theming</h3>
        <ul>
          <li>
            Always apply theme classes to <code>content-grid</code> elements
          </li>
          <li>
            Use <code>.surface</code> class on content within themed sections for
            visual consistency
          </li>
          <li>
            Use <code>::before</code> pseudo-elements for overlays (z-index: 0)
          </li>
          <li>Keep content at z-index: 10 or higher</li>
          <li>Use design token overrides rather than hardcoded values</li>
          <li>
            Test themes with all container types (content, breakout, full-width)
          </li>
          <li>Maintain consistent spacing using <code>var(--grid)</code></li>
          <li>Create wrapper components for team-wide consistency</li>
        </ul>

        <h3>Theme + Container Example</h3>
        <p>Themes work seamlessly with the container grid system:</p>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{"<section class=\"theme-legenda content-grid\">"}
{"  <article class=\"surface\">"}
{"    <!-- Content column with Legenda theme -->"}
{"    <h1>Magazine Article</h1>"}
{"  </article>"}
{"  "}
{"  <div class=\"breakout\">"}
{"    <!-- Breakout column, still themed -->"}
{"    <img src=\"wide-image.jpg\" alt=\"Wide image\" />"}
{"  </div>"}
{"  "}
{"  <div class=\"full-width\" style=\"background: rgba(0,0,0,0.5);\">"}
{"    <!-- Full-width with custom background -->"}
{"    <h2>Full Width Section</h2>"}
{"  </div>"}
{"</section>"}</code></pre>
      </article>

      <!-- Decorative Images -->
      <article>
        <h2>Decorative Background Images</h2>
        <p>
          When adding decorative images that should appear behind content, use
          proper positioning and z-index management. The container must have the
          <code>.surface</code> class for proper visual framing and positioning context.
        </p>

        <h3>Pattern: Background Image Layer</h3>
        <pre
          style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{"<section class=\"themed-section\">"}
{"  <!-- Image layer (behind) -->"}
{"  <Image"}
{"    src=\"/decorative-image.webp\""}
{"    class=\"background-image\""}
{"    alt=\"Decorative\""}
{"    width={1024}"}
{"    height={724}"}
{"    loading=\"lazy\""}
{"  />"}
{"  "}
{"  <!-- Content layer (above) -->"}
{"  <article>"}
{"    <h1>Content</h1>"}
{"    <p>Text and buttons appear above the image</p>"}
{"  </article>"}
{"  "}
{"  <div class=\"cta\">"}
{"    <a href=\"#\" class=\"button\">Call to Action</a>"}
{"  </div>"}
{"</section>"}</code></pre>

        <h3>CSS Implementation</h3>
        <pre style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{"/* Container needs .surface class and position: relative */"}
{".themed-section {"}
{"  position: relative;"}
{"  overflow: hidden; /* Prevent image overflow */"}
{"}"}
{""}
{"/* Note: Add .surface class to the section in HTML */"}
{"/* <section class=\"themed-section surface\"> */"}
{""}
{"/* Background image behind content */"}
{".background-image {"}
{"  position: absolute;"}
{"  z-index: 0;"}
{"  pointer-events: none; /* Clicks pass through */"}
{"  "}
{"  /* Mobile positioning */"}
{"  width: auto;"}
{"  height: calc(var(--grid) * 20);"}
{"  top: calc(var(--grid) * 2);"}
{"  right: calc(var(--grid) * -2);"}
{"  opacity: 0.8;"}
{"}"}
{""}
{"/* Content above the image */"}
{".themed-section > article,"}
{".themed-section > .cta {"}
{"  position: relative;"}
{"  z-index: 10;"}
{"}"}
{""}
{"/* Desktop adjustments */"}
{"@media (min-width: 640px) {"}
{"  .background-image {"}
{"    height: calc(var(--grid) * 35);"}
{"    bottom: calc(var(--grid) * -5);"}
{"    left: calc(var(--grid) * -8);"}
{"    top: auto;"}
{"    right: auto;"}
{"    opacity: 1;"}
{"  }"}
{"}"}</code></pre>

        <h3>Key Principles</h3>
        <ul>
          <li>
            <strong>Container:</strong> Use <code>.surface</code> class + <code>position: relative</code> on
            parent section
          </li>
          <li>
            <strong>Image:</strong>
            <code>position: absolute</code> + <code>z-index: 0</code>
          </li>
          <li>
            <strong>Content:</strong>
            <code>position: relative</code> + <code>z-index: 10</code>
          </li>
          <li>
            <strong>No interaction:</strong>
            <code>pointer-events: none</code> on image
          </li>
          <li>
            <strong>Containment:</strong>
            <code>overflow: hidden</code> on container
          </li>
          <li>
            <strong>Responsive:</strong> Adjust size/position with media queries
          </li>
          <li>
            <strong>Spacing:</strong> Use <code>var(--grid)</code> for positioning
          </li>
        </ul>

        <h3>Real Example: Basilisk in LetlBlock</h3>
        <p>
          The front page L&L section uses this pattern with a decorative
          basilisk image that flips horizontally on desktop and positions
          itself at the bottom-left corner. Note the <code>.surface</code> class
          on the section for proper visual framing.
        </p>
        <pre style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{"<!-- HTML structure -->"}
{"<section class=\"letl-section surface\">"}
{"  <Image src=\"/letl/basiliski.webp\" class=\"basilisk\" ... />"}
{"  <article>...</article>"}
{"  <div class=\"cta\">...</div>"}
{"</section>"}</code></pre>
        <pre style="background: #2d2d2d; color: #f8f8f2; padding: var(--grid); overflow-x: auto; border-radius: 4px;"><code>{"/* Flip image horizontally on desktop */"}
{"transform: scaleX(-1);"}
{""}
{"/* Position relative to section */"}
{"bottom: calc(var(--grid) * -5);"}
{"left: calc(var(--grid) * -8);"}</code></pre>

        <h3>Best Practices</h3>
        <ul>
          <li>Always set explicit width/height on Image component</li>
          <li>Use <code>loading="lazy"</code> for below-fold images</li>
          <li>Keep aspect ratio with <code>width: auto</code> or <code>height: auto</code></li>
          <li>Test on mobile - images may need different positioning</li>
          <li>Use opacity on mobile to reduce visual weight</li>
          <li>Ensure content remains readable over the image</li>
        </ul>
      </pre>

        <!-- File Locations -->
        <article style="background: var(--surface-secondary); color: white;">
          <h2>File Locations</h2>
          <p class="text-small">
            For reference when working with the design system:
          </p>
          <ul class="text-small">
            <li>
              <code>/src/styles/tokens.css</code> – Design tokens (colors, spacing)
            </li>
            <li>
              <code>/src/styles/content-grid.css</code> – Content grid system (with
              container queries)
            </li>
            <li><code>/src/styles/surface.css</code> – Surface component</li>
            <li><code>/src/styles/two-col.css</code> – Two-column layout</li>
            <li>
              <code>/src/styles/golden-col.css</code> – Golden ratio layout
            </li>
            <li><code>/src/styles/flex.css</code> – Flex utilities</li>
            <li>
              <code>/src/styles/themes/letl.css</code> – L&L theme
            </li>
            <li>
              <code>/src/styles/themes/legenda.css</code> – Legenda theme
            </li>
            <li>
              <code>/src/styles/themes/quick.css</code> – Quick theme
            </li>
          </ul>
          <p class="text-small" style="margin-top: var(--grid); opacity: 0.8;">
            💡 All styles are imported via <code>/src/styles/styles.css</code>
          </p>
        </article>

        <!-- Existing Button Examples -->
        <article>
          <h2>Buttons</h2>
          <p>Button styling examples (full documentation coming in Phase 2)</p>
          <div class="flex flex-col justify-center">
            <button>A button</button>
            <a href="#buttons" class="button">A link Button</a>
            <button class="textButton">Text Button</button>
            <a href="#buttons" class="button textButton">Link Text Button</a>
          </div>
        </article>
      </article>
      <SiteFooter />
    </section>
  </body>
</html>
